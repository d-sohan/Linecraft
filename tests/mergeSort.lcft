void merge(int a[], int p, int q, int r) {
  int n1 := q - p + 1;
  int n2 := r - q;
  int L[n1 + 1], R[n2 + 1];

  int i := 0;
  while (i < n1){
    L[i] := a[p + i];
    i := i+1;
  }

  i := 0;
  while (i < n2){
    R[i] := a[q + 1 + i];
    i := i+1;
  }

  // Include the limits.h header file for INT_MAX
  L[n1] := 2147483647; // INT_MAX
  R[n2] := 2147483647; // INT_MAX

  int i := 0, j := 0, k := p;
  while(k <= r) {
    if (L[i] <= R[j]) {
      a[k] := L[i];
      i := i+1;
    } else {
      a[k] := R[j];
      j := j+1;
    }
    k := k+1;
  }
}

// MergeSort
void mergeSort(int a[], int p, int r) {
  if (p < r) {
    int q := (r + p) / 2;
    mergeSort(a, p, q);
    mergeSort(a, q + 1, r);
    merge(a, p, q, r);
  }
}

int main() {
  int n, m;

  int b[5];

  mergeSort(b, 0, m - 1);

  int start, end, a[5], c[5], mid;
  int i := 0
  while (i < n) {

    start := 0;
    end := m - 1;
    int flag := -1;
    while (start <= end) {
      mid := (start + end) / 2;
      if (b[mid] <= a[i]) {
        start := mid + 1;
        flag := 0;
      } else {
        end := mid - 1;
        flag := 1;
      }
    }

    if (flag)
      c[i] := mid;
    else
      c[i] := mid + 1;
    
    i := i+1;
  }
}